2023-04-21
1.
Rebooted the shmup because I didn't want to deal with the spaghetti code in SpaceFighter. It's probably not as bad to most programmers
as it was to me, because the program was relatively small. Restarting was a good idea tho, because I can rethink some fundamentals.

First of all I'm not calling the main menu through the level anymore. In main.py I'm declaring the gamestate. If the gamestate is
'mainmenu', we're generating the main menu. Alternatively, we can run 'level'. I like this setup, since I can easily call new levels.

I'm also using a timestep that measures how long it took to run the game loop. Everything that runs as a function of time is dependent 
on this timestep. This includes all movement and the enemy spawning. Using a timestep ensures that the program runs consistently on different
hardware. It also allows for more accurate behaviour. I hope the program can be called deterministic at this point so far, which allows
for the option to replay a run. I can now also introduce slowdown, which can be used to allow for complex bullet patterns while retaining
playability. Slowdown could also be a power for the player. I'll definitely use it to test patterns, since I'm not that good of a shmup player.

I've introduced lanes for the spawning of enemies. This gives a good tool for balanced level design.

I've recalculated the borders, so we have a 3:4 ratio, which I believe is the standard for shmups.

One feature that I'd like to implement is the creation of enemy waves and sections of the level through different classes. This allows the
level class to not get cluttered with a huge list of enemies spawning. Instead there'll be a list of waves that are called sequentially. 
The actual spawning will get relegated to the Wave class. I'll have to join lists of sprites for rendering in level, but I think I can make
that work.

I've created a deadline for this project, which'll be two months. The goal is to have a working prototype within that time.
I'll need one level, which means designing a challenge. 

I've decided to create 5 enemy sprites. 
I'll need 3 different enemy bullet types, with 2 different colors. Ofcourse I need player bullet sprites as well.
I'll also need sprites for the boss, and a player sprite.
I'll definitely need explosion sprites.
A background and particles would be cool, but they're less important than the other sprites.
A more neat border image, maybe a nice main menu are also less important.

I'll create one audiotrack for the level, and one for the boss. I think I already have a fitting tune for the end screen.
Sound effects are important, but are also optional if I'm ahead of schedule.

A cool gimmick to add would be options for the player, which are like little turrets that travel along with the player and help. A lot of
shmups use them, and I think they're pretty cool.

Designing the level is the most work. I'll figure out some way to organize the waves, and I'll start working on that.

The one thing that is missing from the code right now that I want to salvage from the previous draft is the bullets. I didn't really 
finish the challenges that I set for myself, but I'm a bit bored of progressing that way. I'll figure it out once I want to use it
when designing the level. 

2023-04-23
1.
Kind of a big update. I intend to use the devlog more sparsely, as it's a time consuming factor in itself. It's a great tool for 
organizing thought tho, and it's good practice just in case I ever wind up involved with professional indie game development.

On the surface the biggest upgrade is the implementation of a wave class, which allows me to organize individual waves. This'll remove 
clutter from the level itself, and allows design with smaller numbers.
However, the biggest improvement in code came from asking a question on stackoverflow. After getting downvoted like crazy someone did
help me out, and showed me how to make singular calls during a while loop without having to create all those stupid switches. The easier
way is to create a dummy as an argument, dummy = []. Wrap the function in an if statement, checking if dummy is empty.
After the function executes, append something, like dummy.append(0) Now every time the function is called it won't execute since the dummy
isn't empty. I've already gathered that this can create unintended behaviour, so I might have to create checks in the code that empty the
dummy if the level is restarted, but it works for now, and I'm very pleased with it so far.
Another way to have a function call a single time is to go into global(), and edit the function ater execution to pass or something similar.
This seems a bit more tricky, so I'll just use the dummy for now.

I'm also understanding more correctly how to apply timers. For one, I don't need to import the time that an object like level has into 
the enemies that are spawned through that object. The time in level is something that's used for organizing level, and useless to enemies.
Enemies can create their own time by logging time.get_ticks() at initialization, and that's all the information an enemy object needs
to have their own clock.

One last thing that I'm happy with is that I've rediscovered my solution in SpaceFigher for delegating behaviour of sprites to other 
classes by exporting the sprite groups from the place where rendering and collision is handled. It's information that needs to stay 
conserved over all objects that are spawned in the level, but if managed correctly it's a very powerful tool. In SpaceFighter I delegated
bullet spawning to a class in the bullet script, and in DogShmup I've delegated enemy spawning to the waves script. Here's how I intend
to make the next steps:
1. Implement the Bullet class from SpaceFighter into DogShmup. Player bullets aren't necessary as of yet, but for the level design I 
do need to have the bullet patterns of enemies.
2. Create children for the Enemy class. I'll be using a limited number of enemy design, and I don't want to insert parameters everytime
when I already have like 6 different types.
3. When I have an enemy, I'd like to create some AI for it, so I don't have to describe the same behaviour again and again. I've seen someone
create a seperate class for AI, but I think I'd like to write the AI for every enemy type into their class as methods. So for bullets we
get this structure on how they're called: Level>Waves>Enemies>Bullets. 

The firing of aimed bullets requires the position of the player, so besides information from level about the sprite groups, 
we'll also need to pass along information regaring the player. However, information about the player should already be stored within the
sprite groups. I'm not sure if that information updates after spawning though, so this might be a bit tricky.
(edit: checked in the Wave class, and through digging inside the imported groups from level I'm able to extract information from the
player. The players position is updating, which is absolutely amazing news.)

2.
I'm writing this in the same breath as 1., but I feel like this should get its own header, because I don't intend to do anything with
these observations.
I'm really missing acceleration for the motion. Having objects move at a singular speed is somewhat boring to look at, but when I'm altering
the speed manually the motion looks a bit janky, as expected. I'm not gonna write acceleration in the motion methods of enemies duing this 
project tho. There's some really cool things that I think you could do when implementing acceleration, like using integrators to render
inbetween the processing of the game logic. To do it well I'll need to hit the physics books again, which I intend to do, but it is
outside the scope of this project.

2023-04-24
1.
It was a bit of a struggle, but bullets are implemented. I deleted two hours of progress once by accident, and it's a chore to refactor 
the code to the new project. But it's sort of working now. I also added a method to the enemies that allows bullets to be aimed by the AI.
The basics of the AI are working. It controls the movement of enemies and bullet spawning. In the current example I have a type of enemy
called PopcornBunny fire a triple shot at the player once. What I really want is for the shots to be on a timer. After a timer is set up
I'll describe conditions for types of shots to be fired. Some conditions that we need are distance between player and enemy, so enemy doesn't
suddenly shoot with no opportunity to respond. This ability of the player to block enemies from shooting is called bullet sealing. 
Another condition would be distance to the lower border, so that enemies scrolling down don't spawn complex patterns towards the back of the 
player, making for too rough a punishment on the player after leaving an enemy alive.

I'll need some food, a walk with the dog, and I'll work on the AI some more tomorrow. When it comes to planning what to do next, I think I
can continue along these lines. Creating new enemies, developing existing ones further with sprites and stuff, and designing spawn patterns.

2023-04-28
1.
Finished an enemy, the PopcornBird, gave it two AI, and gave it sprite animation.
It's basic, but functional, and I think it looks okay.

I tried to create a slowdown, but it interferes with the spawn timers.
This is because I simply cut dt in half, but the spawning is done through pg.time.get_ticks() * dt.
So if we restore dt, the spawning will restore to a state as if no slowdown has occured.
I can try to fix this through collecting the time that slowdown occured in main and passing it along to level and waves.
I can also try to rewrite current_time in the level in such a way that it accumaltes with instances of pg.time.get_ticks * dt. 

2. 
Implemented the slowdown where the total slowdown time is accumulated in a list and passed along to level and waves.
I think it works, but I've noticed some jank when it comes to the accumulated time. This is because the slowdown time is multiplied
with dt, and dt is actually variable over time, so the values don't add up exactly. It quite minor though, as far as I can tell. 
I've messed around with different places to do the dt multiplication, and I've settles on the one that seems to be least janky.

The problem with the slowdown is that it's really effective. You can keep the slowdown pressed down, and it'll prevent enemies from spawning.
This makes the game way too easy to play, so I might remove it at a later point. 
I could also create an attribute of the player which has to be spent in order to activate the slowdown. I'll have to drag that attribute
all the way back to main though, somehow. 
I could actually also move the slowdown into Level. I can't think of a reason why I shouldn't, since slowdown isn't a useful feature 
if the Level isn't loaded.

3.
Moved slowdown to Level, but spawning is still quite janky. I'll remove everything related to slowdown to keep things clean.

The next thing I want to do before continuing is creating a visible hitbox for the player that overlaps the sprite.
I want a new sprite anyway, so I'll be updating the Player class in general.
I'll try adding a new enemy as well. 
I wonder if creating a mask for the enemy sprites will be too much when checking for collision...

4. 
Something funny happens in the current build. If the player sprite moves above the first wave of birds the birds glitch out and won't 
move out of the screen.

5.
I think I fixed AI bugging out. Feels like a rite of initiation in game programming to fix a simple AI you thought would just work. 
The composite movement of moving down and slowly moving towards the player makes it so that the spatial triggers 
for the next movement aren't met. I've the movement towards the player in an if statement that checks if the player position isn't
higher than the enemies, so that the adjustment towards player position doesn't subtract from the downward motion. It seems to work, and
the movement doesn't look too janky as far as I can tell.

One thing I've noticed is that the player can manipulate the trajectory of the enemies by positioning themselves in such a way that
the trajectory becomes longest, thus having the enemies on screen for a longer time. This is an aspect of player freedom that could
negate some choices made in level design. Accidentally keeping enemies on the screen for a long time could create unbeatable patterns at a
certain point. I don't know how to design around this, so it's just something I'll have to keep in the back of my mind and see if it
becomes a problem.

2023-04-29
1.
I've noticed a very ugly bug in the enemy spawning, where print(self.current_time) in waves results in the following output: 
18.566758632659912
19.83906602859497
20.803293704986572
21.168715238571167
19.572134017944336
19.810706853866577
20.065688610076904
22.15120267868042
20.851157903671265
22.076955556869507
22.454861164093018
22.468857049942017
23.727485179901123
22.772170543670654
22.213569164276123

This is the result of declaring self.current_time = (pg.time.get_ticks() * dt) - self.spawn_time, with dt being variable.
So we're taking all the elapsed time, and multiplying it with a variable factor, which causes output like: 
18, 18, 19, 20, 21, 19, 19, 20, 22, 23, 22, etc. It's a mess, and my spawning is reliant on this mess...
Also, the error becomes larger as the number of ticks grows larger. So I'm glad I'm catching it now, but it sucks to have to come back
to these fundamentals over and over again.

The probable solution is to recreate dt in level, waves and enemies, basically every class that spawns on timers, 
and have every dt add to current_time in their respective class. That at least keeps the timer from producing negative times.

I can't fix it right now, since I forgot the power cable for my laptop, and the batteries aren't all that great. I'll just push as is, and
probably continue tomorrow. I did finish what I set out to make, which is a hitbox, and a new player sprite with animation that follows the
position of the hitbox. I'm sure I can improve on the animation, but it looks kind of cute as is.

Next steps are fixing the time in the spawning classes, adding sprites for bullets, coding player bullets and collision, and it might
be cool to already have indicator sprites that bullets are hitting enemy hitboxes as well as sprites for explosions.

2.
Just logging a small celebration. All my code and setup is on the laptop, but I wanted to try adding a fix for the spawning on my desktop.
I've installed git, cloned my repository, added a fix for the spawns, and pushed the update back to git, without too much effort. It's nice
to notice some progress in skill.

Fixing current_time changed the scale of things, so I'll have to adjust constants. I want to implement the same fix in all spawning classes,
so I'll have some tweaking of numbers to do tomorrow. I'm glad I caught this in time.

3.
Noticed another bug, with the aim of enemies being off.
I've looked all over the code, and eventually found that the spawning point of the bullet is used in the aiming of the shot, instead of the
center of the enemy, as intended. What's weird is that if I enter other attributes in the spawning of the bullet through self.* Python looks
in the enemy, not the bullet. Maybe there's a hierarchy that's being searched.
Anyway, if I set the spawning point in the center of the enemy the trajectory of the bullet goes straight through the player hitbox, as intended.
It's a bummer if I can't spawn bullets from the beak of the bird enemies, so I've altered the point that's being aimed at. I thought it'd be a 
somewhat reasonable assumption to have the adjustment in target be equal to the offset between center of enemy and spawning point, but it 
turns out that this isn't true. In this case it turns out that 2*offset is the right adjustment. Intuitively this feels like ducttape.
The most thorough way to do away with this problem (without rewriting the code for aiming) is to delegate bullet spawning to emitter sprites 
within the enemy.

2023-04-30
1.
I've implemented bullet sprites. I want the hurtbox for the bullet to be significantly smaller than the actual sprite, which caused some issues.
I think I have working code right now, but the bullet sprites will always have to be 32x32 (empty space is allowed ofc), and the hurtbox will
always be 12x12.
The type of bullet sprite to be spawned will have to be stated with the spawning of bullets, either through ShotsFired or EnemyBullet. 
My sprite folders must reflect the name of the bullet type.
A cool feature of the bullet sprites is that they rotate towards the bullet trajectory. A pointy bullet aimed at the player will visually reflect this.
This is all done upon spawning, so if a class of bullets is created that change their direction after spawning, I'll also have to write a method
so that the bullet sprites can be updated with these changes.

I've created a first sprite, and I though it'd be a good idea to have a brighter color bullet so it would jump out from the other sprites.
Either I made it too bright, or I should stick with the colors that I have, because it looks like shit tbh.
What I do like is the animation for the bullet, with a line traveling from left to right.
What I dislike is the shape. It's basically an elipse with two pointy ends on the top and bottom. The shape of the top creates a somewhat weird
visual when the sprite is rotated. Back to the drawing board for the sprites.

(edit: changing the spawning position of the bullet with -10 fixed the weird visual where a bullet would seem to spawn a bit right of center,
so that wasn't the sprites' fault.)
(edit2: another improvement upon the sprites would be to create them on a 16x16 bitmap in piskel, and save them as 32x32, to reflect the inflated sprites
from the enemies and player.)

2023-05-02
1.
I want to start implementing complex motion for bullets. I think I know how I want to achieve this.
I'll add a method to bullets that needs to be called if I want to start a motion that is described through polar coordinates.

The movement in polar coordinates is composed of a delta radius and a delta phi. Delta radius and delta phi form some sort of ratio, where
if delta radius = 0 but delta phi != 0 we get a purely circular motion. 
The reverse, delta radius != 0 and delta phi = 0, gives a purely linear motion.  

I can think of two types of methods. 
One accepts dr and dphi as arguments. Let's call it the delta method.
dr and dphi are calculated to produce a direction that is stored in an attribute of the bullet.
The direction will then be passed along to the move() method.

The other method works as move_to() in Enemy, where a coordinate is given as the argument. Let's call it the move_to method.
We'll need the spawning position of the bullet as an attribute, and declare the trajectory as one or a sequence of calls to this method.
So let's say we want a sequence of three different motions for the bullets: 
1, (0,0) -> (10,0), which is movement in a straight line,
2, (10,0) -> (10, 4*pi), which circles around the spawning position 2 times,
3, (10, 4*pi) -> (inf, inf), which makes a spiraling motion.
The only way I think this could work is if upon spawning the bullet creates a list composed of direction * speed * dt, and executes the
delta method to determine the next item in the list. 

This is some pseudo code for polar_move_to:
polar_move_to_dict(initial_position = (0,0), destination = (10, pi/2)):
    dr_total = destination[0] - initial_position[0]
    dphi_total = destination[1] - initial_position[1]
    number_of_steps = length_of_path / (speed * dt)
    list_of_steps = list(range(0, numer_of_steps))
    movement_dict = {}
    for step in list_of_steps:
        movement_dict[step] = delta_method

polar_move_to():
    dict = polar_move_to_dict()
    k = 0
    if k < number_of_steps:
        self.direction = dict[k]

I'm not sure if this really makes sense. I've been trying to understand this for a few hours on end now. I think I'll take a break.

I think I should start by creating a function that interprets the polar coordinates and executes a move_to function.
Once I have that I can refine the execution and split the motion in smaller changes of direction to create the circular motion.

2023-05-03
1.
This has been really challenging. I've created a function that interprets polar coordinates, calculates the point, and chooses the shortest distance
towards that point. Theoretically I could expand on that, and split the path into steps, with the direction updating at each step to create a smooth
circular motion.
The problem with this is that dt is variable, so it wouldn't do to have a list of steps generated during a single dt. It's bound to be inaccurate
compared to the actual motion.

Another thing that I tried was to update the direction by specifying the tangent along the circle. I've researched some trigonometry and eventually
came up with this:
self.direction = pg.math.Vector2(((-(self.pos[1] - origin[1]) / radius) * self.dt), (((self.pos[0] - origin[0]) / radius) * self.dt)).normalize()
It works, kind of. There are two problems with this method.
1; The motion isn't smooth. The bullet seems to slow down at specific points in space, which is odd, since self.direction should be a unit vector and
self.speed remains constant throughout. I'm not sure why this happens. This might have to do with the function not being continuous at 
a certain derivative, but my math isn't good enough to figure this one out by myself. I might ask the internet at a certain point.
2; The other problem is that the trajectory isn't exactly accurate. The object seems to drift, and given enough cycles we can see a 
displacement that shouldn't occur if the radius is a constant. This becomes especially obvious at high velocities. 
The code uses the current position of the object to determine the direction, so I can imagine that the error creeps in through this variable, 
adding up over time. This could be fixed if the position of the object was checked against a predetermined path.

I'm glad that I managed to get this far, but it won't do when it comes to creating a fun bullethell. That drift on the bullet makes them unpredictable,
which is the worst quality a bullet in a bullethell can have.

I think I sort of understand how to create an accurate method.
I should declare the necessary variables to describe points along a circle, using polar coordinates z = r(cos(theta) + i sin(theta)).
I'll declare a delta_phi, and have the method compute the next point along the circle as a function of delta_phi.
This creates a coordinate that should be on the circumference. This coordinate is passed along as a destination.
Every tick the method updates the current position of the player, checks the position against the circumference,
and updates the destination.
I might want to disable the linear motion that is always active in bullet.update(), to have a less confusing time maybe.  

It has been a janky process so far, but I think it needs to get worse before it gets better. I'm wondering how the angular velocity and the
linear velocity of the bullet will interact. We'll see if this works out. Here are some sources that I can use to implement this:
https://www.javatpoint.com/defining-a-circle-using-polar-coordinates
https://gamedev.stackexchange.com/questions/55045/pygame-circular-motion-with-bresenhams-algorithm
https://en.wikipedia.org/wiki/Rotation_matrix

One last note I'd like to add is that I don't agree with this bullet sprite either. The color is off, and the sprite is a bit too big.

2023-05-04
1.
It's been a rough ride, but I have something that works.
I've created a new class, CircularPath, which creates a number of points along the circumference of a circle.
After loading the class into an attribute of bullet, the bullet will scroll through the points with a new method called move_path().
Instead of adjusting direction towards that point, as was the plan, I've settled on directly updating the position to be equivalent to the coordinate
on the path. Since we're updating directly the speed of the bullet doesn't reflect it's speed on the screen.
The number of points created is correlated to bullet.speed, but this doesn't work that great. 
This is partly because the length of the path traveled causes the number of points to be increased, requiring a corresponding increase in speed, 
lest the time spent on the curve also doubles, effectively halving the speed if length of path is doubled. 
The number of points and velocity have to be manually tweaked to mimic the actual speed of the bullet.

The class is quite flexible in its usage tho. I can give the total movement along the circle in radians, and when the movement ends the bullet
will reactivate its usual move() method to continue along the direction of the last point in the path. An angle of 4*pi will result in two
circular motions, while an angle of 1/24 * pi will give a relatively small change in direction.
I can also give a phase, so that if ShotsFired distributes 5 bullets along a circle, I can give all bullets the same path, but each with a phase
that is relevant to their position. I haven't tried it out yet tho, and implementing this behaviour probably requires also passing along the
direction of ShotsFired as part of the phase to prevent the bullets from teleporting into positions along the circumference. 

There are several ways forward when it comes to creating polar movement for the bullets.
- The first one is expanding on the new Path class, abstracting it to allow for custom functions like y = f(x) or parametric equations.
I might be able to describe polar motion through those parametric equations, allowing for r and theta to be variable over time.
- The second one is returning to the abandoned polar_move() in bullet. 
Since polar_move() only updates the direction we can conserve speed, which makes it somewhat easier since we don't have to tweak numbers.
The way that this would work is by creating a new method that takes a delra_r and a delta_theta and divides them into small steps along a 
ratio between delta_r and delta_theta. The small steps should be traversable in let's say 20 ticks. 
For each step polar_move() is called to update the direction. Polar_move can register when destination has been hit, so that can trigger
the updating to a new destination. 
Since the total displacement is now gradual, the curve of the path should approximate a movement through the polar plane.
Theoretically we could create complex paths by stringing together several of these bigger polar motions.

Both ways are promising, and they both have their perks. 
polar_move() would be smoother to work with, but the Path class is useful for long motions, like the butterfly curve.
Recreating something like the butterfly curve using individual polar displacements could become a nightmare.

I think I'll do something else today, like working on the music or designing an enemy. I'll continue programming motion
after doing something a bit less heavy on theory.